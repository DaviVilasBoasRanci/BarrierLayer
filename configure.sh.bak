#!/bin/bash
# Basic configuration for BarrierLayer

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}Configuring BarrierLayer...${NC}"

#--- Seleção do Lançador Padrão ---
echo ""
echo -e "${YELLOW}Please choose your default launch method:${NC}"
echo "1) Proton (Recommended for Steam games)"
echo "2) Wine (For non-Steam games)"
echo "3) Auto-Detect (Launcher will decide)"

read -p "Enter your choice [1-3]: " choice

LAUNCH_METHOD="auto" # Padrão é auto-detect
case $choice in
    1)
        LAUNCH_METHOD="proton"
        echo -e "${GREEN}Default launcher set to: Proton${NC}"
        ;;
    2)
        LAUNCH_METHOD="wine"
        echo -e "${GREEN}Default launcher set to: Wine${NC}"
        ;;
    3)
        LAUNCH_METHOD="auto"
        echo -e "${GREEN}Default launcher set to: Auto-Detect${NC}"
        ;;
    *)
        echo -e "${YELLOW}Invalid choice. Defaulting to Auto-Detect.${NC}"
        LAUNCH_METHOD="auto"
        ;;
esac

#--- Build Mode ---
echo ""
echo -e "${YELLOW}Choose Build Mode:${NC}"
echo "1) Release (Optimized, default)"
echo "2) Debug (Debugging symbols, no optimization)"
echo "3) Release with Debug Info (Optimized with debugging symbols)"
read -p "Enter your choice [1-3]: " build_mode_choice

BUILD_MODE="release"
case $build_mode_choice in
    1) BUILD_MODE="release" ;;
    2) BUILD_MODE="debug" ;;
    3) BUILD_MODE="relwithdebinfo" ;;
    *) echo -e "${YELLOW}Invalid choice. Defaulting to Release.${NC}" ;;
esac

#--- Build Kernel Module ---
read -p "${YELLOW}Build Kernel Module? (Y/N) [Y]: ${NC}" BUILD_KERNEL_CHOICE
BUILD_KERNEL=${BUILD_KERNEL_CHOICE:-"Y"}
BUILD_KERNEL=$(echo ${BUILD_KERNEL} | tr '[:lower:]' '[:upper:]')
if [[ ! "YN" =~ ${BUILD_KERNEL} ]]; then BUILD_KERNEL="Y"; fi

#--- Build GUI ---
read -p "${YELLOW}Build Graphical User Interface (GUI)? (Y/N) [Y]: ${NC}" BUILD_GUI_CHOICE
BUILD_GUI=${BUILD_GUI_CHOICE:-"Y"}
BUILD_GUI=$(echo ${BUILD_GUI} | tr '[:lower:]' '[:upper:]')
if [[ ! "YN" =~ ${BUILD_GUI} ]]; then BUILD_GUI="Y"; fi

#--- Enable Ultra Logging ---
read -p "${YELLOW}Enable Ultra Logging? (Y/N) [Y]: ${NC}" ENABLE_ULTRA_LOGGING_CHOICE
ENABLE_ULTRA_LOGGING=${ENABLE_ULTRA_LOGGING_CHOICE:-"Y"}
ENABLE_ULTRA_LOGGING=$(echo ${ENABLE_ULTRA_LOGGING} | tr '[:lower:]' '[:upper:]')
if [[ ! "YN" =~ ${ENABLE_ULTRA_LOGGING} ]]; then ENABLE_ULTRA_LOGGING="Y"; fi

#--- Compatibility ---
read -p "${YELLOW}Enable Wine support? (0/1) [0]: ${NC}" USE_WINE_CHOICE
USE_WINE=${USE_WINE_CHOICE:-"0"}
if [[ ! "01" =~ ${USE_WINE} ]]; then USE_WINE="0"; fi

read -p "${YELLOW}Enable Proton support? (0/1) [0]: ${NC}" USE_PROTON_CHOICE
USE_PROTON=${USE_PROTON_CHOICE:-"0"}
if [[ ! "01" =~ ${USE_PROTON} ]]; then USE_PROTON="0"; fi

#--- FPS Overlay ---
read -p "${YELLOW}Enable FPS Overlay? (yes/no) [yes]: ${NC}" ENABLE_FPS_OVERLAY_CHOICE
ENABLE_FPS_OVERLAY=${ENABLE_FPS_OVERLAY_CHOICE:-"yes"}
ENABLE_FPS_OVERLAY=$(echo ${ENABLE_FPS_OVERLAY} | tr '[:upper:]' '[:lower:]')
if [[ ! "yesno" =~ ${ENABLE_FPS_OVERLAY} ]]; then ENABLE_FPS_OVERLAY="yes"; fi

#--- Optimizations ---
read -p "${YELLOW}Enable Link Time Optimization (LTO)? (Y/N) [N]: ${NC}" ENABLE_LTO_CHOICE
ENABLE_LTO=${ENABLE_LTO_CHOICE:-"N"}
ENABLE_LTO=$(echo ${ENABLE_LTO} | tr '[:lower:]' '[:upper:]')
if [[ ! "YN" =~ ${ENABLE_LTO} ]]; then ENABLE_LTO="N"; fi

read -p "${YELLOW}Enable Native CPU Optimizations? (Y/N) [N]: ${NC}" ENABLE_NATIVE_CHOICE
ENABLE_NATIVE=${ENABLE_NATIVE_CHOICE:-"N"}
ENABLE_NATIVE=$(echo ${ENABLE_NATIVE} | tr '[:lower:]' '[:upper:]')
if [[ ! "YN" =~ ${ENABLE_NATIVE} ]]; then ENABLE_NATIVE="N"; fi

#--- Criação do config.mk ---
echo ""
echo "Creating config.mk..."
cat > config.mk << EOL
# BarrierLayer Configuration

# Default launch method (proton, wine, auto)
DEFAULT_LAUNCHER = ${LAUNCH_METHOD}

# Build Mode
BUILD_MODE = ${BUILD_MODE}

# Build Features
BUILD_KERNEL = ${BUILD_KERNEL}
BUILD_GUI = ${BUILD_GUI}
ENABLE_ULTRA_LOGGING = ${ENABLE_ULTRA_LOGGING}

# Compatibility
USE_WINE = ${USE_WINE}
USE_PROTON = ${USE_PROTON}

# FPS Overlay
ENABLE_FPS_OVERLAY = ${ENABLE_FPS_OVERLAY}

# Optimizations
ENABLE_LTO = ${ENABLE_LTO}
ENABLE_NATIVE = ${ENABLE_NATIVE}

# Compiler
CC = gcc

# Flags
CFLAGS = -Isrc/include -Wall -Wextra -g

# Linker Flags
LDFLAGS = -ldl -lX11

# Kernel build directory
KDIR ?= /lib/modules/\\\$(shell uname -r)/build
EOL

echo ""
echo -e "${GREEN}Configuration complete!${NC}"
echo "You can now run 'make' to build the project."
echo "To change settings, run this script again."
